<?xml version="1.0" encoding="utf-8"?>
<grammar root="SearchPapers">
  <import schema="samplePrivateLibraryData.linked.search.schema.json" name="libraryPapers"/>

  <rule id="SearchPapers">

    <tag>
      <!-- Query variable contains the query expression that maps to each grammar interpretation path and can be directly used with Evaluate to get entities -->
      query = All();

      <!-- Variables used for various asserts later in grammar -->
      hasSearchResult = false;
      abstractTitleWordCount = 0;
    </tag>
    
    <!-- Paper search queries can start with "papers..." or "paper..." -->
    <one-of>
      <item logprob="-10"></item>
      <item>papers</item>
      <item>paper</item>
    </one-of>
    
    <!-- <snippet_multiple_attribute_search_loop> -->
    <!-- Process search queries using one or more search grammar -->
    <item repeat="1-INF" repeat-logprob="-1">

      <!-- Assert that we never search for terms beyond the end of the query -->
      <tag>
        IsBeyondEndOfQuery = GetVariable("IsBeyondEndOfQuery", "system");
        AssertEquals(IsBeyondEndOfQuery, false);
      </tag>
    <!-- </snippet_multiple_attribute_search_loop> -->
      <one-of>
        <!-- Different search behaviors -->
        <item>
          <one-of>
            <!-- Attribute search -->
            <item logprob="-1">
              <one-of>
                <!-- Match year -->
                <item>
                  <item repeat="0-1">published in</item>
                  <attrref uri="libraryPapers#Year" name="q"/>
                </item>
              </one-of>

              <tag>
                query = And(query, q);
              </tag>
            </item>

            <!-- Composite attribute search -->
            <item logprob="-2">
              <one-of>
                <!-- <snippet_direct_attribute_search> -->
                <!-- Match digitial object identifier -->
                <item>
                  <item repeat="0-1">with doi</item>
                  <attrref uri="libraryPapers#DOI.Name" name="q"/>
                </item>
                
                <!-- Match full title -->
                <item>
                  <item repeat="0-1">titled</item>
                  <attrref uri="libraryPapers#Title.Name" name="q"/>
                </item>
                
                <!-- Match full text url -->
                <item>
                  <item repeat="0-1">with full text url</item>
                  <attrref uri="libraryPapers#FullTextUrl.Name" name="q"/>
                </item>
                <!-- </snippet_direct_attribute_search> -->
                
                <!-- Match field of study -->
                <item logprob="-1">
                  <item repeat="0-1">about</item>
                  <attrref uri="libraryPapers#FieldsOfStudy.Name" name="q"/>
                </item>
                
                <!-- Match author -->
                <item logprob="-1">
                  <item repeat="0-1">by</item>
                  <attrref uri="libraryPapers#AuthorAffiliations.AuthorName" name="q"/>
                </item>

                <!-- Match affiliation -->
                <item logprob="-1">
                  <item repeat="0-1">from</item>
                  <attrref uri="libraryPapers#AuthorAffiliations.AffiliationName" name="q"/>
                </item>
              </one-of>
              <!-- <snippet_create_return_query> -->
              <tag>
                q = Composite(q);
                query = And(query, q);
              </tag>
              <!-- </snippet_create_return_query> -->
            </item>

            <!-- Partial title search -->
            <item logprob="-3">
              <item repeat="1-INF">
                <!-- Assert that we never search for terms beyond the end of the query -->
                <tag>
                  IsBeyondEndOfQuery = GetVariable("IsBeyondEndOfQuery", "system");
                  AssertEquals(IsBeyondEndOfQuery, false);
                </tag>
                <one-of>
                  <!-- Match title word -->
                  <item logprob="-1">
                    <attrref uri="libraryPapers#Title.Words" name="q"/>
                    <tag>
                      abstractTitleWordCount = Increment(abstractTitleWordCount);
                      q = Composite(q);
                      query = And(query, q);
                    </tag>
                  </item>
                </one-of>
              </item>
            </item>

            <!-- <snippet_partial_attribute_search> -->
            <!-- Partial abstract search -->
            <item logprob="-4">
              <item repeat="1-INF">
                <!-- Assert that we never search for terms beyond the end of the query -->
                <tag>
                  IsBeyondEndOfQuery = GetVariable("IsBeyondEndOfQuery", "system");
                  AssertEquals(IsBeyondEndOfQuery, false);
                </tag>
                <one-of>
                  <!-- Match abstract word -->
                  <item logprob="-3">
                    <attrref uri="libraryPapers#Abstract.Words" name="q" />
                    <tag>
                      abstractTitleWordCount = Increment(abstractTitleWordCount);
                      q = Composite(q);
                      query = And(query, q);
                    </tag>
                  </item>
                </one-of>
              </item>
              <!-- </snippet_partial_attribute_search> -->
            </item>
            
            <!-- Composite entity search -->
            <item logprob="-1">
              <!-- Match author -->
              <item>
                by
                <attrref uri="libraryPapers#AuthorAffiliations.AuthorName" name="qAuthorName"/>
              </item>

              <!-- Match affiliation -->
              <item>
                while at
                <attrref uri="libraryPapers#AuthorAffiliations.AffiliationName" name="qAffiliationName"/>
              </item>

              <tag>
                q = And(qAuthorName, qAffiliationName);
                q = Composite(q);
                query = And(query,q);
              </tag>
            </item>
          </one-of>

          <!-- Marks that at least one of the above search behaviors is used to parse the query -->
          <tag>
            hasSearchResult = true;
          </tag>
        </item>

        <!-- <snippet_allow_drop_terms_in_quries> -->
        <!-- Words/terms that cannot be matched using the above search behaviors, aka "garbage/dropped" terms. -->
        <item logprob="-25">
          <!-- Make any terms as "garbage" terms -->
          <ruleref uri="#DropWord"/>
        </item>
        <!-- </snippet_allow_drop_terms_in_quries> -->

      </one-of>
    </item>

    <!-- <snippet_partial_attribute_search_constraints> -->
    <!-- Ensure that if title/abstract words search was executed, they have at least 3 or more word matches-->
    <one-of>
      <item>
        <tag>
          Assert(abstractTitleWordCount, 2, "gt");
        </tag>
      </item>
      <item>
        <tag>
          Assert(abstractTitleWordCount, 0, "eq");
        </tag>
      </item>
    </one-of>
    <!-- </snippet_partial_attribute_search_constraints> -->


    <!-- <snippet_drop_term_constraints> -->
    <tag>
      <!-- Ensure not all query terms are treated as garbage words/dropped terms. At least one of the search
       behaviors above has results.-->
      AssertEquals(hasSearchResult, true);      
    </tag>
    <!-- <snippet_drop_term_constraints> -->
    
    <!-- Treat all remaining terms as dropped terms if needed-->
    <item repeat="0-1">
      <tag>
        <!-- Only match remaining query terms if we're not at the end of the query -->
        IsAtEndOfQuery = GetVariable("IsAtEndOfQuery", "system");
        AssertEquals(IsAtEndOfQuery, false);
      </tag>

      <!-- Gets all remaining query terms and places them into "remainingGarbage" variable -->
      <regex pattern=".*" name="remainingGarbage" />

      <tag>
        <!-- Use number of spaces in string + 1 as a way to determine word count -->
        spaceCount = MatchCount(remainingGarbage, "\s+");
        spaceCount = Increment(spaceCount);

        <!-- Add grammar weight "penalty" based on the number of "garbage" words present; note that this penalty is equivilant to the "logprob" weight penalty used for <item> tags -->
        penalty = Multiply(spaceCount, 25000);
        query = AddGrammarWeight(query, penalty);
      </tag>
    </item>

    <!-- Ensure all grammar paths resulted in a query that can be used to retrieve non-empty entity results.-->
    <tag>
      <!-- Resolve the query by executing it and retriving top results-->
      entities = Resolve(query);
      <!-- Check if the execution was able to fetch any results-->
      hasResults = HasResults(entities);
      <!-- Ensure only the grammar path is only valid if the return query can retrieve non-empty entity results -->
      AssertEquals(hasResults, true);
      <!-- Set the output the query execution result-->
      out = entities;
    </tag>

  </rule>

  <!-- treat any terms as "garbage" terms -->
  <rule id="DropWord" return="String">
      <regex pattern='\b\w+' name="garbage" />
      <tag>
          out = garbage;
      </tag>
  </rule>
</grammar>